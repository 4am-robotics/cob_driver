/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 41 generated on 2011-06-20 18:42:47.666026
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return 1.0f;
    }
    else if( f < 0 ) {
        return -1.0f;
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95,x96,x97,x98,x99,x100,x101,x102,x103,x104,x105,x106,x107,x108,x109,x110,x111,x112,x113,x114,x115,x116,x117;
x0=IKcos(j[1]);
x1=IKsin(j[3]);
x2=IKcos(j[2]);
x3=IKcos(j[3]);
x4=IKsin(j[1]);
x5=IKsin(j[4]);
x6=((x0)*(x1));
x7=((x2)*(x3)*(x4));
x8=((x7)+(x6));
x9=IKcos(j[4]);
x10=IKsin(j[2]);
x11=IKsin(j[6]);
x12=IKsin(j[0]);
x13=IKcos(j[0]);
x14=IKcos(j[6]);
x15=IKcos(j[5]);
x16=((x10)*(x13));
x17=((x0)*(x12)*(x2));
x18=((x17)+(x16));
x19=((-1.00000000000000)*(x18));
x20=((x19)*(x3));
x21=((x1)*(x12)*(x4));
x22=((x20)+(x21));
x23=((x0)*(x10)*(x12));
x24=((x13)*(x2));
x25=((((-1.00000000000000)*(x24)))+(x23));
x26=IKsin(j[5]);
x27=((x0)*(x24));
x28=((x10)*(x12));
x29=((x12)*(x2));
x30=((x0)*(x16));
x31=((x30)+(x29));
x32=((((-1.00000000000000)*(x27)))+(x28));
x33=((-1.00000000000000)*(x8));
x34=((x33)*(x5));
x35=((x10)*(x4)*(x9));
x36=((((-1.00000000000000)*(x35)))+(x34));
x37=((x0)*(x3));
x38=((x1)*(x2)*(x4));
x39=((((-1.00000000000000)*(x38)))+(x37));
x40=((x26)*(x39));
x41=((x8)*(x9));
x42=((x10)*(x4)*(x5));
x43=((((-1.00000000000000)*(x42)))+(x41));
x44=((x15)*(x43));
x45=((x44)+(x40));
x46=((x31)*(x9));
x47=((-1.00000000000000)*(x3)*(x32));
x48=((-1.00000000000000)*(x1)*(x13)*(x4));
x49=((x48)+(x47));
x50=((x49)*(x5));
x51=((x46)+(x50));
x52=((x22)*(x9));
x53=((x25)*(x5));
x54=((x53)+(x52));
x55=((x15)*(x54));
x56=((x1)*(x18));
x57=((x12)*(x3)*(x4));
x58=((x57)+(x56));
x59=((x26)*(x58));
x60=((x59)+(x55));
x61=((x25)*(x9));
x62=((x1)*(x13)*(x4));
x63=((x3)*(x32));
x64=((x62)+(x63));
x65=((x64)*(x9));
x66=((x31)*(x5));
x67=((x65)+(x66));
x68=((x15)*(x67));
x69=((x13)*(x3)*(x4));
x70=((((-1.00000000000000)*(x28)))+(x27));
x71=((x1)*(x70));
x72=((x71)+(x69));
x73=((x26)*(x72));
x74=((x73)+(x68));
x75=((-1.00000000000000)*(x20));
x76=((-1.00000000000000)*(x21));
x77=((x76)+(x75));
x78=((x5)*(x77));
x79=((x78)+(x61));
x80=((-1.00000000000000)*(x60));
x81=((-1.00000000000000)*(x45));
x82=((-1.00000000000000)*(x64));
x83=((x5)*(x82));
x84=((x46)+(x83));
x85=((-1.00000000000000)*(x54));
x86=((((-1.00000000000000)*(x41)))+(x42));
x87=((-1.00000000000000)*(x67));
x88=((0.316500000000000)*(x16));
x89=((0.316500000000000)*(x17));
x90=((x88)+(x89));
x91=((-1.00000000000000)*(x90));
x92=((0.192700000000000)*(x41));
x93=((0.192700000000000)*(x42));
x94=((x92)+(((-1.00000000000000)*(x93))));
x95=((0.192700000000000)*(x38));
x96=((0.192700000000000)*(x37));
x97=((x95)+(((-1.00000000000000)*(x96))));
x98=((0.192700000000000)*(x57));
x99=((0.192700000000000)*(x56));
x100=((x99)+(x98));
x101=((-1.00000000000000)*(x100));
x102=((0.192700000000000)*(x52));
x103=((0.192700000000000)*(x53));
x104=((x102)+(x103));
x105=((0.192700000000000)*(x65));
x106=((0.192700000000000)*(x66));
x107=((x105)+(x106));
x108=((0.316500000000000)*(x28));
x109=((0.316500000000000)*(x27));
x110=((((-1.00000000000000)*(x109)))+(x108));
x111=((0.192700000000000)*(x69));
x112=((0.192700000000000)*(x71));
x113=((x112)+(x111));
x114=((-1.00000000000000)*(x113));
x115=((-1.00000000000000)*(x68));
x116=((-1.00000000000000)*(x73));
x117=((x116)+(x115));
eerot[0]=((((0.183010304668818)*(x14)*(x45)))+(((-0.183020000548001)*(x11)*(x51)))+(((-0.965924897590095)*(x14)*(x60)))+(((-0.183020000548001)*(x14)*(x74)))+(((0.183010304668818)*(x11)*(x36)))+(((-0.965924897590095)*(x11)*(((((-1.00000000000000)*(x22)*(x5)))+(x61))))));
eerot[1]=((((-0.965924897590095)*(x14)*(x79)))+(((0.183010304668818)*(x11)*(x81)))+(((0.183020000548001)*(x11)*(x74)))+(((-0.183020000548001)*(x14)*(x51)))+(((-0.965924897590095)*(x11)*(x80)))+(((0.183010304668818)*(x14)*(x36))));
eerot[2]=((((-0.965924897590095)*(x15)*(x58)))+(((0.183010304668818)*(x15)*(x39)))+(((-0.183020000548001)*(x15)*(x72)))+(((-0.183020000548001)*(x26)*(x87)))+(((0.183010304668818)*(x26)*(x86)))+(((-0.965924897590095)*(x26)*(x85))));
eetrans[0]=((-0.00575257616720444)+(((-0.965924897590095)*(x1)*(x91)))+(((0.0746721602235844)*(x13)*(x4)))+(((-0.183020000548001)*(x1)*(x110)))+(((0.183010304668818)*(x15)*(x97)))+(((-0.183020000548001)*(x114)*(x15)))+(((-0.0579227614276808)*(x37)))+(((-0.965924897590095)*(x101)*(x15)))+(((0.305715230087265)*(x57)))+(((0.183010304668818)*(x26)*(x94)))+(((-0.0746682043048776)*(x0)))+(((0.0579227614276808)*(x38)))+(((-0.183020000548001)*(x107)*(x26)))+(((0.394097358216759)*(x12)*(x4)))+(((0.0579258301734423)*(x69)))+(((-0.965924897590095)*(x104)*(x26))));
eerot[3]=((((-0.683015503672999)*(x11)*(x84)))+(((-0.683015503672999)*(x14)*(x74)))+(((0.258822510973972)*(x14)*(x60)))+(((0.683008586736249)*(x14)*(x45)))+(((0.683008586736249)*(x11)*(x36)))+(((0.258822510973972)*(x11)*(x79))));
eerot[4]=((((-0.683015503672999)*(x11)*(x117)))+(((0.258822510973972)*(x14)*(x79)))+(((0.683008586736249)*(x14)*(x36)))+(((-0.683015503672999)*(x14)*(x84)))+(((0.258822510973972)*(x11)*(x80)))+(((0.683008586736249)*(x11)*(x81))));
eerot[5]=((((0.683008586736249)*(x26)*(x86)))+(((0.683008586736249)*(x15)*(x39)))+(((-0.683015503672999)*(x15)*(x72)))+(((0.258822510973972)*(x26)*(x85)))+(((-0.683015503672999)*(x26)*(x87)))+(((0.258822510973972)*(x15)*(x58))));
eetrans[1]=((-0.175752146684062)+(((0.278670325498584)*(x13)*(x4)))+(((0.216174406912504)*(x69)))+(((-0.216172217702023)*(x37)))+(((0.258822510973972)*(x101)*(x15)))+(((-0.683015503672999)*(x114)*(x15)))+(((0.683008586736249)*(x15)*(x97)))+(((-0.683015503672999)*(x1)*(x110)))+(((0.258822510973972)*(x1)*(x91)))+(((-0.105599584477380)*(x12)*(x4)))+(((0.216172217702023)*(x38)))+(((0.258822510973972)*(x104)*(x26)))+(((-0.0819173247232621)*(x57)))+(((-0.683015503672999)*(x107)*(x26)))+(((-0.278667503388390)*(x0)))+(((0.683008586736249)*(x26)*(x94))));
eerot[6]=((((-0.707111376538080)*(x14)*(x45)))+(((-0.707111376538080)*(x11)*(x36)))+(((-0.707102185784862)*(x14)*(x74)))+(((5.35649803617952e-6)*(x11)*(x79)))+(((-0.707102185784862)*(x11)*(x51)))+(((5.35649803617952e-6)*(x14)*(x60))));
eerot[7]=((((5.35649803617952e-6)*(x14)*(x79)))+(((-0.707102185784862)*(x11)*(x117)))+(((-0.707102185784862)*(x14)*(x84)))+(((-0.707111376538080)*(x14)*(x36)))+(((-0.707111376538080)*(x11)*(x81)))+(((5.35649803617952e-6)*(x11)*(x80))));
eerot[8]=((((-0.707102185784862)*(x15)*(x72)))+(((5.35649803617952e-6)*(x26)*(x85)))+(((-0.707111376538080)*(x26)*(x86)))+(((-0.707102185784862)*(x26)*(x87)))+(((-0.707111376538080)*(x15)*(x39)))+(((5.35649803617952e-6)*(x15)*(x58))));
eetrans[2]=((1.01314784413452)+(((-2.18545119876124e-6)*(x12)*(x4)))+(((5.35649803617952e-6)*(x104)*(x26)))+(((-0.707102185784862)*(x1)*(x110)))+(((0.223800750674302)*(x37)))+(((5.35649803617952e-6)*(x101)*(x15)))+(((0.288497691800224)*(x13)*(x4)))+(((-0.707111376538080)*(x26)*(x94)))+(((5.35649803617952e-6)*(x1)*(x91)))+(((-0.707111376538080)*(x15)*(x97)))+(((-1.69533162845082e-6)*(x57)))+(((0.288501441627537)*(x0)))+(((-0.223800750674302)*(x38)))+(((-0.707102185784862)*(x114)*(x15)))+(((-0.707102185784862)*(x107)*(x26)))+(((0.223797841800909)*(x69))));
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.707102185784862)*(r20)))+(((-0.683015503672999)*(r10)))+(((-0.183020000548001)*(r00))));
new_r01=((((-0.707102185784862)*(r21)))+(((-0.683015503672999)*(r11)))+(((-0.183020000548001)*(r01))));
new_r02=((((-0.707102185784862)*(r22)))+(((-0.683015503672999)*(r12)))+(((-0.183020000548001)*(r02))));
new_px=((0.595304777628440)+(((-0.136258591200743)*(r22)))+(((-0.0352679541055998)*(r02)))+(((-0.683015503672999)*(py)))+(((-0.131617087557787)*(r12)))+(((-0.707102185784862)*(pz)))+(((-0.183020000548001)*(px))));
new_r10=((((5.35649803617952e-6)*(r20)))+(((-0.965924897590095)*(r00)))+(((0.258822510973972)*(r10))));
new_r11=((((5.35649803617952e-6)*(r21)))+(((-0.965924897590095)*(r01)))+(((0.258822510973972)*(r11))));
new_r12=((((5.35649803617952e-6)*(r22)))+(((-0.965924897590095)*(r02)))+(((0.258822510973972)*(r12))));
new_py=((0.0399266284442112)+(((5.35649803617952e-6)*(pz)))+(((0.258822510973972)*(py)))+(((-0.186133727765611)*(r02)))+(((0.0498750978646844)*(r12)))+(((-0.965924897590095)*(px)))+(((1.03219717157179e-6)*(r22))));
new_r20=((((0.683008586736249)*(r10)))+(((-0.707111376538080)*(r20)))+(((0.183010304668818)*(r00))));
new_r21=((((0.683008586736249)*(r11)))+(((-0.707111376538080)*(r21)))+(((0.183010304668818)*(r01))));
new_r22=((((0.683008586736249)*(r12)))+(((-0.707111376538080)*(r22)))+(((0.183010304668818)*(r02))));
new_pz=((0.837501372742083)+(((0.183010304668818)*(px)))+(((-0.136260362258888)*(r22)))+(((0.131615754664075)*(r12)))+(((0.0352660857096812)*(r02)))+(((-0.707111376538080)*(pz)))+(((0.683008586736249)*(py))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
cj3array[0]=((-1.03241741009200)+(((3.87200693863643)*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
{
    j3valid[1]=false;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst0;
IKReal x118=(cj2)*(cj2);
IKReal x119=(py)*(py);
IKReal x120=(sj2)*(sj2);
gconst0=IKsign(((((2000.00000000000)*(py)*(((((px)*(py)*(x120)))+(((px)*(py)*(x118)))))))+(((2000.00000000000)*(px)*(((((-1.00000000000000)*(x119)*(x120)))+(((-1.00000000000000)*(x118)*(x119)))))))));
dummyeval[0]=0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((1.66177758810449)+((cj3)*(cj3))+((((cj2)*(cj2))*((sj3)*(sj3))))+(((2.57819905213270)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
IKReal x121=((0.316500000000000)*(cj3));
IKReal x122=(cj2)*(cj2);
IKReal x123=(sj3)*(sj3);
IKReal x124=((0.100172250000000)*(x122)*(x123));
IKReal x125=((0.408000000000000)+(x121));
IKReal x126=(x125)*(x125);
IKReal x127=((x126)+(x124));
if( (x127) < (IKReal)-0.00001 )
    continue;
IKReal x128=IKsqrt(x127);
IKReal x129=IKabs(x128);
IKReal x130=((IKabs(x129) != 0)?((IKReal)1/(x129)):(IKReal)1.0e30);
IKReal x131=((pz)*(x130));
if( (x131) < -1-IKFAST_SINCOS_THRESH || (x131) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x132=IKasin(x131);
IKReal x133=((-0.408000000000000)+(((-1.00000000000000)*(x121))));
IKReal x134=((0.316500000000000)*(cj2)*(sj3));
IKReal x135=IKatan2(x133, x134);
j1array[0]=((x132)+(((-1.00000000000000)*(x135))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.00000000000000)*(x135)))+(((-1.00000000000000)*(x132))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
{
    j1valid[1]=false;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal dummyeval[1];
IKReal gconst1;
gconst1=IKsign(((((102000.000000000)*(sj1)*((px)*(px))))+(((102000.000000000)*(sj1)*((py)*(py))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
IKReal x136=((0.316500000000000)*(cj3));
IKReal x137=((x136)+(pz));
IKReal x138=((-0.408000000000000)+(((-1.00000000000000)*(x137))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=((0.266636250000000)+(((0.258264000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=x138;
evalcond[3]=((-0.0662917500000000)+(((-0.816000000000000)*(pz)))+(((-1.00000000000000)*(pp))));
evalcond[4]=x138;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((((-2000.00000000000)*((py)*(py))))+(((-2000.00000000000)*((px)*(px))))));
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
j0array[0]=IKatan2(((gconst2)*(((((633.000000000000)*(cj2)*(py)*(sj3)))+(((-633.000000000000)*(px)*(sj2)*(sj3)))))), ((gconst2)*(((((633.000000000000)*(cj2)*(px)*(sj3)))+(((633.000000000000)*(py)*(sj2)*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x183=((0.316500000000000)*(cj3));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=((0.266636250000000)+(((0.258264000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((0.408000000000000)+(x183)+(((-1.00000000000000)*(pz))));
evalcond[3]=((-0.0662917500000000)+(((0.816000000000000)*(pz)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((-0.408000000000000)+(((-1.00000000000000)*(x183)))+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((2000.00000000000)*((py)*(py))))+(((2000.00000000000)*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
j0array[0]=IKatan2(((gconst3)*(((((633.000000000000)*(cj2)*(py)*(sj3)))+(((633.000000000000)*(px)*(sj2)*(sj3)))))), ((gconst3)*(((((633.000000000000)*(cj2)*(px)*(sj3)))+(((-633.000000000000)*(py)*(sj2)*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
j0array[0]=IKatan2(((gconst1)*(((((-8286.46875000000)*(py)))+(((32283.0000000000)*(px)*(sj1)*(sj2)*(sj3)))+(((-125000.000000000)*(pp)*(py)))+(((-102000.000000000)*(cj1)*(py)*(pz)))))), ((gconst1)*(((((-8286.46875000000)*(px)))+(((-102000.000000000)*(cj1)*(px)*(pz)))+(((-125000.000000000)*(pp)*(px)))+(((-32283.0000000000)*(py)*(sj1)*(sj2)*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x184=((-1.00000000000000)*(py));
IKReal x185=IKatan2(x184, px);
IKReal x186=(px)*(px);
IKReal x187=(py)*(py);
IKReal x188=((x186)+(x187));
if( (x188) < (IKReal)-0.00001 )
    continue;
IKReal x189=IKsqrt(x188);
IKReal x190=IKabs(x189);
IKReal x191=((IKabs(x190) != 0)?((IKReal)1/(x190)):(IKReal)1.0e30);
IKReal x192=((0.316500000000000)*(sj2)*(sj3)*(x191));
if( (x192) < -1-IKFAST_SINCOS_THRESH || (x192) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x193=IKasin(x192);
j0array[0]=((((-1.00000000000000)*(x185)))+(x193));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x185)))+(((-1.00000000000000)*(x193))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((-665856.000000000)+(((-400689.000000000)*((cj2)*(cj2))*((sj3)*(sj3))))+(((-400689.000000000)*((cj3)*(cj3))))+(((-1033056.00000000)*(cj3)))));
dummyeval[0]=((-1.66177758810449)+(((-2.57819905213270)*(cj3)))+(((-1.00000000000000)*((cj2)*(cj2))*((sj3)*(sj3))))+(((-1.00000000000000)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
j1array[0]=IKatan2(((gconst4)*(((((-1266000.00000000)*(cj2)*(pz)*(sj3)))+(((1632000.00000000)*(py)*(sj0)))+(((1632000.00000000)*(cj0)*(px)))+(((1266000.00000000)*(cj3)*(py)*(sj0)))+(((1266000.00000000)*(cj0)*(cj3)*(px)))))), ((gconst4)*(((((1266000.00000000)*(cj3)*(pz)))+(((1266000.00000000)*(cj0)*(cj2)*(px)*(sj3)))+(((1632000.00000000)*(pz)))+(((1266000.00000000)*(cj2)*(py)*(sj0)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x194=(py)*(py);
IKReal x195=(sj2)*(sj2);
IKReal x196=(cj2)*(cj2);
j0array[0]=IKatan2(((gconst0)*(((((633.000000000000)*(sj2)*(sj3)*(x194)))+(((633.000000000000)*(sj2)*(sj3)*(((((-1.00000000000000)*(x194)*(x196)))+(((-1.00000000000000)*(x194)*(x195)))))))))), ((gconst0)*(((((-633.000000000000)*(sj2)*(sj3)*(((((px)*(py)*(x195)))+(((px)*(py)*(x196)))))))+(((633.000000000000)*(px)*(py)*(sj2)*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((-665856.000000000)+(((-400689.000000000)*((cj2)*(cj2))*((sj3)*(sj3))))+(((-400689.000000000)*((cj3)*(cj3))))+(((-1033056.00000000)*(cj3)))));
dummyeval[0]=((-1.66177758810449)+(((-2.57819905213270)*(cj3)))+(((-1.00000000000000)*((cj2)*(cj2))*((sj3)*(sj3))))+(((-1.00000000000000)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
j1array[0]=IKatan2(((gconst4)*(((((-1266000.00000000)*(cj2)*(pz)*(sj3)))+(((1632000.00000000)*(py)*(sj0)))+(((1632000.00000000)*(cj0)*(px)))+(((1266000.00000000)*(cj3)*(py)*(sj0)))+(((1266000.00000000)*(cj0)*(cj3)*(px)))))), ((gconst4)*(((((1266000.00000000)*(cj3)*(pz)))+(((1266000.00000000)*(cj0)*(cj2)*(px)*(sj3)))+(((1632000.00000000)*(pz)))+(((1266000.00000000)*(cj2)*(py)*(sj0)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x139=((sj1)*(sj3));
IKReal x140=((cj1)*(cj2)*(cj3));
IKReal x141=((((-1.00000000000000)*(x140)))+(x139));
IKReal x142=((cj1)*(sj3));
IKReal x143=((cj2)*(cj3)*(sj1));
IKReal x144=((x142)+(x143));
IKReal x145=((sj0)*(x141));
IKReal x146=((cj0)*(cj3)*(sj2));
IKReal x147=((((-1.00000000000000)*(x146)))+(x145));
IKReal x148=((cj0)*(x141));
IKReal x149=((cj3)*(sj0)*(sj2));
IKReal x150=((x148)+(x149));
IKReal x151=((cj2)*(sj0));
IKReal x152=((cj0)*(cj1)*(sj2));
IKReal x153=((x152)+(x151));
IKReal x154=((cj1)*(sj0)*(sj2));
IKReal x155=((cj0)*(cj2));
IKReal x156=((((-1.00000000000000)*(x155)))+(x154));
IKReal x157=((cj2)*(x142));
IKReal x158=((cj3)*(sj1));
IKReal x159=((x157)+(x158));
IKReal x160=((cj1)*(cj3));
IKReal x161=((cj2)*(x139));
IKReal x162=((((-1.00000000000000)*(x161)))+(x160));
IKReal x163=((sj0)*(x159));
IKReal x164=((cj0)*(sj2)*(sj3));
IKReal x165=((x163)+(x164));
IKReal x166=((cj0)*(x159));
IKReal x167=((sj0)*(sj2)*(sj3));
IKReal x168=((((-1.00000000000000)*(x167)))+(x166));
new_r00=((((r20)*(x144)))+(((r00)*(x150)))+(((r10)*(x147))));
new_r01=((((r01)*(x150)))+(((r21)*(x144)))+(((r11)*(x147))));
new_r02=((((r02)*(x150)))+(((r22)*(x144)))+(((r12)*(x147))));
new_r10=((((r00)*(x153)))+(((-1.00000000000000)*(r20)*(sj1)*(sj2)))+(((r10)*(x156))));
new_r11=((((r01)*(x153)))+(((-1.00000000000000)*(r21)*(sj1)*(sj2)))+(((r11)*(x156))));
new_r12=((((-1.00000000000000)*(r22)*(sj1)*(sj2)))+(((r02)*(x153)))+(((r12)*(x156))));
new_r20=((((r00)*(x168)))+(((r20)*(x162)))+(((r10)*(x165))));
new_r21=((((r01)*(x168)))+(((r21)*(x162)))+(((r11)*(x165))));
new_r22=((((r22)*(x162)))+(((r12)*(x165)))+(((r02)*(x168))));
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
{
    j5valid[1]=false;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
IKReal gconst6;
gconst6=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign(((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12))))));
dummyeval[0]=((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[7];
IKReal x169=((-1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=x169;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x169;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x170=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x170));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x170))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x171=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x171));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x171))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst5)*(new_r12)*(sj5)), ((gconst5)*(new_r02)*(sj5)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal gconst7;
gconst7=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x172=((new_r02)*(sj4));
IKReal x173=((cj4)*(new_r12));
IKReal x174=((new_r12)*(sj4));
IKReal x175=((cj4)*(new_r02));
IKReal x176=((x175)+(x174));
IKReal x177=((-1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=x177;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((((-1.00000000000000)*(x172)))+(x173));
evalcond[5]=((((-1.00000000000000)*(x173)))+(x172));
evalcond[6]=x176;
evalcond[7]=x176;
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x177;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x178=((new_r02)*(sj4));
IKReal x179=((cj4)*(new_r12));
IKReal x180=((new_r12)*(sj4));
IKReal x181=((cj4)*(new_r02));
IKReal x182=((x180)+(x181));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r21;
evalcond[3]=new_r20;
evalcond[4]=((((-1.00000000000000)*(x178)))+(x179));
evalcond[5]=((((-1.00000000000000)*(x179)))+(x178));
evalcond[6]=x182;
evalcond[7]=((-1.00000000000000)*(x182));
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(gconst7)*(new_r21)), ((gconst7)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(gconst6)*(new_r21)), ((gconst6)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
IKReal gconst8;
gconst8=IKsign(((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12))))));
dummyeval[0]=((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst8)*(new_r12)*(sj5)), ((gconst8)*(new_r02)*(sj5)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "<robot:genericrobot - cob3-2 (aca6a0c661b045f7da1c37f82c4bf10f)>"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
      std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
