// ----------------------------------------------------------------------
// Neobotix 
// www.neobotix.de
// Copyright (c) 2003. All rights reserved.
// ----------------------------------------------------------------------

// ----------------------------------------------------------------------
// Platform.ini
// Configuration file for neobotix mobile platforms
// ----------------------------------------------------------------------
//
// ----------------------------------------------------------------------
// Configuration of the platform geometry
// ----------------------------------------------------------------------
[Geom]

// Length of the platform in [mm]
PltfLength = 800 //(mit Huelle) //679 (ohne Huelle)

// Width of the platform in [mm]
PltfWidth = 600 //(mit Huelle) //500 (ohne Huelle)

// Distance of the wheels in [mm] // also used in ThreadMotionCtrl->PostProcess (ToDo: get rid of it)
DistWheels = 470

// Distance of the platform center to the wheel axis in [mm]
DistPltfCenterToWheelAxis = 0

// Distance of the wheel steering axis to the wheel center in [mm]
DistSteerAxisToDriveWheelCenter = 22 // (Neobotix: 18.1)

// Distance of the wheel axis to the front scanner in [mm] in x-direction // has to be replaced by distance between PlatformCenter and Scanner
DistWheelAxisToScanner = 352
// Distance of the Platform center to the front scanner in [mm] in y-direction
ScannerDeltaY = 0
// Angle between the Platform frame an the front scanner in [rad]
ScannerDeltaPhi = 0

// Distance of the wheel axis to the rear scanner in [mm] in negative x-direction
RearScannerDeltaX = -352
// Distance of the Platform center to the front scanner in [mm] in negative y-direction
RearScannerDeltaY = 0
// Angle between the Platform frame an the front scanner in [rad]
RearScannerDeltaPhi = 3.1415926536

// Distance of the wheel axis to the side scanner in [mm] in negative x-direction
SideScannerDeltaX = -252
// Distance of the Platform center to the side scanner in [mm] in negative y-direction
SideScannerDeltaY = 0
// Angle between the Platform frame an the side scanner in [rad]
SideScannerDeltaPhi = 0



// Position of the wheels' steering axis' with respect to the platform center (in robot coordinates) in [mm]
// Wheel1
Wheel1XPos = 235
Wheel1YPos = 185

// Wheel2
Wheel2XPos = -235
Wheel2YPos = 185

// Wheel3
Wheel3XPos = -235
Wheel3YPos = -185

// Wheel4
Wheel4XPos = 235
Wheel4YPos = -185

// Height of the scan plain [mm]
HeightScanPlain = 112

// Radius of the wheels in [mm]
RadiusWheel = 75 


// ----------------------------------------------------------------------
// Constraining Parameters of the implemented motors and drives
// ----------------------------------------------------------------------
[DrivePrms]

// Maximum Rotational Rate for the Drive Wheels [rad/s]
MaxDriveRate = 12.267;

// Maximum Rotational Rate for Steering Motion of the wheels [rad/s]
MaxSteerRate = 24.4;

// Coupling of Steer and Drive Motors of the Wheels (DriveVelo [rad/s] = SteerVelo [rad/s] * couplingRate)
// sign gives direction : -0.5 means if direction of wheel changes by 180° position of drive wheel changes by -90°
Wheel1SteerDriveCoupling = 0.5;
Wheel2SteerDriveCoupling = 0.5;
Wheel3SteerDriveCoupling = 0.5;
Wheel4SteerDriveCoupling = 0.5;

// Orientation of Wheels after beeing homed
// in Degrees (Double-Value)
Wheel1NeutralPosition = -180.0;
Wheel2NeutralPosition = -180.0;
Wheel3NeutralPosition = 0.0;
Wheel4NeutralPosition = 0.0;


// ----------------------------------------------------------------------
// Configuration of the platform position after startup
// ----------------------------------------------------------------------
[Startup]
// Load map on start up
LoadMapOnStartup = true

// Load roadmap on start up
LoadRoadmapOnStartup = true

// Load program on start up
LoadProgramOnStartup = true

// Init platform on start up
InitPlatformOnStartup = true

//Navigation Mode on start up
// 0 - navigation on map data
// 1 - navigation on map collection data (navigation with submaps)
NavigationMode = 0

// Selftest enabled?
SelftestOnStartup  = false

// Position for selftest
SelftestPosX = -10000
SelftestPosY = -22000
SelftestPosA = 3.14

// Start program on start up
StartProgramOnStartup = false

// Load startup position from file
LoadStartupPosFromFile = true

// Interval in sec. to write robot position to startup file (0.05 .. n). 
// -1 means do not write position cyclically (only when shutting down the program)
IntervalWritePosS = -1



// ----------------------------------------------------------------------
// Configuration of the shutdown procedure
// ----------------------------------------------------------------------
[Shutdown]
// Shutdown position
ShutdownPosX = -11500
ShutdownPosY = -23000
ShutdownPosA = 3.14

SwitchOffAtShutdown = false;

// ----------------------------------------------------------------------
// Configuration relating the simulation
// ----------------------------------------------------------------------
[Simulation]

// Enables simulation of the platform
SimuEnable = false

// True: Online simulation is active. 
// False: Post processing. The sensor data is read from a log file
SimuModeOnlineEnabled = true

// Enables the logging of all sensor datas for post processing
LogForPostProcessEnabled = true

// Enables 3D-navigation.
Nav3DEnabled = false

// moveable obstacles in simulation
MouseObstaclesEnabled = false

// random obstacles in simulation
RndObstaclesEnabled = false

// ----------------------------------------------------------------------
// Selection of the hardware components
// ----------------------------------------------------------------------
[Config]

// 1: IOBoard is available, 0: no IOBoard
IOBoard = 0

// 1: USBoard is available. 0: No IO-board
USBoard = 0

// 1: GyroBoard is available, 0: no Gyroboard
GyroBoard = 0

// 1: RadarBoard is available, 0: no Radarboard
RadarBoard = 0

// 1: RelayBoard is available, 0: no Relayboard
RelayBoard = 1
RelayBoardCom = "/dev/ttyUSB2";

// 0: no motor
// 1: motor of the type neo
// 2: motor of the type ham
Wheel1DriveMotor = 2;
Wheel1SteerMotor = 2;
Wheel2DriveMotor = 2;
Wheel2SteerMotor = 2;
Wheel3DriveMotor = 2;
Wheel3SteerMotor = 2;
Wheel4DriveMotor = 2;
Wheel4SteerMotor = 2;

// 1: drive for moving a head is available. 0: no drive
HeadDrive = 0
HeadDriveDegToInc = 144.44 // 26 * 2000 / 360
HeadDrivePosOffsetDeg = 156;
HeadDriveCom = "COM1" // Linux: "/dev/ttyS0";

// 1: text to speech prozessor/sound output is available. 0: no sounds
TextToSpeech = 0

// Socket port listining for a GUI application
SockPortToPltfGUI = 10000

// Socket port listining for an application
SockPortToPltfApp = 10002

// Buffer length for can communication
GenericBufferLen = 512

// Platform hardware type
// 0: neobotix platform
// 1: care-o-bot platform
// 2: mimro platform
// 3: care-o-bot 3 platform (omnidirectional)
PltfHardwareType = 3

// ----------------------------------------------------------------------
// Configuration of the thread cycle times in [s]
// ----------------------------------------------------------------------
[Thread]

ThrMotionCycleTimeS = 0.1 //0.035 //0.03
ThrAppCycleTimeS = 0.3
ThrComGUICycleTimeS = 0.1
ThrComMobileArmCycleTimeS = 0.1
ThrPlannerCycleTimeS = 0.1
ThrLocalizationCycleTimeS = 0.2
ThrUCarrCycleTimeS = 0.02   //0.035
UseThreadSynchronization = true // Use thread synchronization between communication and motion threads.

// true sets the prioritiy of ThreadMotionControl very low. Use only for debugging.
// false: default
LowThreadPriorityEnabled = false

// ----------------------------------------------------------------------
// Configuration of the scanner
// ----------------------------------------------------------------------
[Scanner]

// true: front scanner is available
ScannerFront = true

// Type of the front scanner
// 0: No scanner
// 1: Sick LMS
// 2: Sick S3000
// 3: Sick S300
// 4: Hokuyo URG LX04
// 5: Dummy scanner
ScannerFrontType = 3

// ScanRate determines the cycle time for reading
// data from scanner (attention: effective Time 
// should be greater than 100ms)
// effectiveTime = ThrMotionCycleTimeS * ScanRate
ScanRate = 2;

// Device name for front scanner
// In windows: "COMX": in windows 
// In linux:
//	"/dev/ttyS0" (COM1)
//	"/dev/ttyS1" (COM2)
//	"/dev/ttyUSB0" (COM3)
//	"/dev/ttyUSB1" (COM4)
//	"/dev/ttyUSB2" (COM5)
DeviceNameScannerFront = "/dev/ttyUSB0"


// true: rear scanner is available
ScannerRear = true

// Type of the rear scanner
// 0: No scanner
// 1: Sick LMS
// 2: Sick S3000
// 3: Sick S300
// 4: Hokuyo URG LX04
// 5: Dummy scanner
ScannerRearType = 3

// Device name for rear scanner
DeviceNameScannerRear = "/dev/ttyUSB1"

// Is the scanner build in upside down?
ScannerUpsideDown = true

// true: side scanner is available
ScannerSide = false

// Type of the side scanner
// 0: No scanner
// 1: Sick LMS
// 2: Sick S3000
// 3: Sick S300
// 4: Hokuyo URG LX04
// 5: Dummy scanner
ScannerSideType = 4

// Device name for side scanner
DeviceNameScannerSide = "/dev/ttyACM0"

// Division of the scanner field
StartSideLeftField = 0
EndSideLeftField = 60
StartSideRightField = 180
EndSideRightField = 240

// Type of the serial adapter for connection the scanner
// 0: MoxaISA card (spezific factor for the baud rate)
// 1: MoxaPCI card (spezific factor for the baud rate)
// 2: Care-o-bot card
// 3: Standard (factor of one for the baud rate)
TypeSerialCard = 3

// Division of the scanner field
StartRightField = 115 //110 //0
EndRightField = 115 //110
StartMainField = 115 //110
EndMainField =  426 //431
StartLeftField = 426 //431
EndLeftField = 426 //431 //541 //359


// ----------------------------------------------------------------------
// Configuration of the collision avoidance
// ----------------------------------------------------------------------
[Collision]

// for omnidirectional Planner (PlannerCellDec, PlannerBand, PlannerPRM)
// Minimum distance to an obstacle in x-Direction of the robot in [mm]
PltfLengthDistMM = 50.0;

// Minimum distance to an obstacle in y-Direction of the robot in [mm]
PltfWidthDistMM = 50.0;
// end for omnidirectional Planner

// Minimum distance to an obstacle in [mm]
MinDistMM = 450.0;

// Maximum deceleration of the platform in front of an obstacle [mm/s*s]
MaxDecelMMS = 80.0;

// Obstacles in a greater distance have no effect to the velocity [mm]
MaxReactDistMM = 2000.0;

// Enables low barrier detection
LowBarrierDetectEnabled = false

// Enables collision detection with ultrasonic sensors
CollisionUSEnabled = false

// number of US sensors used for collision detection
NumUS = 0

// Enables collision detection with infrared sensors
CollisionInfraEnabled = false

// Enables backward move in front of a very close obstacle
BwdMoveEnabled =  false

// Maximal depth of a gap for crossing [mm]
MaxGapDepth = 20

// Maximal height of a low barrier [mm]
MaxBarrierHeight = 20


// ----------------------------------------------------------------------
// Miscellaneous parameters
// ----------------------------------------------------------------------
[Misc]

// Watchdog time in [s]. After the watchdog time has expired the velocity is set to zero.
// The watchdog is only active in the velocity mode.
CmdMoveVelWatchdogTimeS = 0.6

// Default configuration of the planning in the automatic mode
DefaultPlanningEnabled = true

// Enables writing measured and commanded values to log file for creating time plots.
LogOfTimePlotEnabled = false

// Enables interpolation from the current position, if the position error is too large.
LostTrackEnabled = true

// Enables stopping, if the position error is too large. In the mode planning an new path will be planed.
StopOnLostTrackEnabled = false

// ----------------------------------------------------------------------
// Configuration of the planner
// ----------------------------------------------------------------------
[Planner]

// Enables the local planner for path modification
BandEnable = true

// Weight for the objective function of the local planner
BandWeightLen= 0.3 //1.0e-3

// Weight for the objective function of the local planner
BandWeightCurv= 0.5e5

// Number of iterations for minimizing the objective function of the local planner
BandNumIterations = 5

// Optimization parameter
BandSearchLenMM = 1000.0

//  Optimizatin parameter
BandSearchStepMM = 10.0

// Update rate of the local planner
BandUpdateRateS = 0.2

// Tolerance of the objective value
BandObjValTol = 2.0

// Distance of two sample points of the path
BandSampleDistMM = 300

// Time to wait in front of an obstacle before starting global planning
CollisionWaitTimeS = 1

//use omnidirectional planning algorithm
UseOmnidirectionalPlanner = true

// ----------------------------------------------------------------------
// File names
// ----------------------------------------------------------------------
[Files]

// File name of the map stored on the platform
FileNameMap = "Platform/Map/andersrum.map"

// File name of the map collection stored on the platform
FileNameMapCollection = "Platform/Mapcollection/PltfMap.mc"

// File name of the roadmap stord on the platform
FileNameRoadmap = "Platform/Roadmap/PltfRoadmap.rm"

// File name of the program on the platform
FileNameProgram = "Platform/Program/PltfProgram.prog"

// Sound to be played at startup
FileNameStartSound = "Start.wav"

// ----------------------------------------------------------------------
// Configuration of the localization
// ----------------------------------------------------------------------
[Localization]

// Method of the localization
// 0: DeadReckoning
// 1: Reflector
// 2: Line segments
// 3: Hypotheses reflector
// 4: Hypotheses line segments
// 5: Reflector and Line
// 6: Slam reflector version 1
// 7: Slam segments version 1
// 8: localize relative
// 9: 3D slam
// 10: edit slam segment
// 11: slam grid map
// 12: graph slam segments
// 13: hypo slam segments
// 14: edit scan map
// 15: global localization with segments
// 16: hypo slam general feature
// 17: global localization with general feature
// 18: graph slam
// 19: Robust localization with general feature
// 20: Global localization with general feature second version
// Its recommended to use the mode 5. The other modes are under development.
LocalizationMode = 5
						
						
// Method for mapping						
// 0: Disabled						
// 1: Reflector						
// 2: Line segments						
// 3: Lines and reflectors
// The mapping modes are under development.
MappingMode = 0	
												
// Initial values of the diagonal elements in the covariance matrix 
// [mm]
ErrX= 1000.0
// [mm]			
ErrY= 1000.0
// [deg]
ErrADeg= 0.5

// Minimum values of the dialog elements in the covariance matrix
// Used to avoid freezing.
// [mm]
MinErrX = 1.0
// [mm]
MinErrY = 1.0
// [deg]
MinErrADeg= 0.2

// Error of dead reckoning
// [6.2 MM per sqrt(MM)] = [0.2 m per sqrt(m)]  groth in robot forward direction
ErrXPerMM = 1.2
// [1.55 MM per sqrt(MM)] = [0.05 m per sqrt(m)] growth in robot sideways direction
ErrYPerMM = 0.55
// gyro drift in degree per hour
ErrADegPerH= 5 		

// Measurement covariance of the laser scan [mm*mm]
MeasCovLen = 10

// Enables gyro for localization
// 0: do not use gyro for localization
// 1: use gyro with error model for error compensation
// 2: use gyro without error compensation
LocWithGyroMode = 0

// Enables additional smoothing filter
LocSmoothFilterEnabled = false

// Distance of the reference frames while slam [mm]
SlamRefFrmDist = 1500

// Size of a submap while slam. [mm]
// The submap is a quadrat. The radius of the interier circle is given.
SlamSubmapSize = 20000

// A feature is removed from a local map after the robot moved
// a given distance [mm]
MaxTravelDistForDelFeat = 10000

// The local map is matched with the global map after the robot moved
// the given distance [mm]
TravelDistForGlobalLoc = 2000

// Minimum significance of a match for a confidence check.
MinSigOfMatchForConf = 0.95

// Maximum measure distance for the scanner [mm]
MaxMeasDist = 20000

// Maximum measure distance for the scanner [mm]
MaxSideMeasDist = 20000

// Selection of the features used for localization and mapping

// Enables segment features
FeatSegEnabled = true

// Enables reflector features
FeatReflEnabled = true

// Enables small cluster features
FeatSmallClusterEnabled = true

// Enables circle features
FeatCircleEnabled = true

// Linear error model for dead reckoning
// corr_delta_trans = a0 * delta_trans + a1 * delta_ang 
// corr_delta_ang   = a2 * delta_trans + a3 * delta ang
DeadReckErrModelEnabled = false
DeadReckErrModelA0 = 0.987175
DeadReckErrModelA1 = -1.81456
DeadReckErrModelA2 = 7.89e-6
DeadReckErrModelA3 = 0.99629

// Association gates for segments
AssSegMaxDist = 100
AssSegMaxAng = 0.5

// Association gate for reflector
AssReflMaxDist = 100

// Association gate for small cluster
AssSmallClusterMaxDist = 100

// Association gate for circle
AssCircleMaxDist = 100

// Maximum change of the robot pose while global localization
MaxRobJumpOnGlobalLocDist = 300
MaxRobJumpOnGlobalLocAng = 0.2

// Circle fit parameters
CircleFitMinNumPoints = 15
CircleFitFracObserved = 0.4
CircleFitMaxVarianz = 100

// Association to become a validated feature while mapping
NumAssForBecomeValidatedSeg = 20
NumAssForBecomeValidatedRefl = 20
NumAssForBecomeValidatedSmallCluster = 20
NumAssForBecomeValidatedCircle = 3

// Number of rejection needed to remove a feature from an old map
NumRejForRemove = 2


// ----------------------------------------------------------------------
// Log
// ----------------------------------------------------------------------
[Log]

// Logging of the first debug level to the console enabled
LogLevel1ConsoleEnabled = true

// Logging of the first debug level to a file enabled
LogLevel1FileEnabled = false

// Logging of the second debug level to the console enabled
LogLevel2ConsoleEnabled = true

// Logging of the second debug level to a file enabled
LogLevel2FileEnabled = false

// Logging of the user program to the console enabled
LogProgConsoleEnabled = true

// Logging of the user program to a file enabled
LogProgFileEnabled = false

// Logging of localization to the console enabled
LogLocConsoleEnabled = true

// Logging of localization to a file enabled
LogLocFileEnabled = false

// Logging of measured execution and cycle times
LogThreadTimesEnabled = false


// ----------------------------------------------------------------------
// Joystick
// ----------------------------------------------------------------------
[Joystick]

// Define Joystick Type:
// 0: None
// 1: Logitech Rumblepad
// 2: Sony Playstation Controller Dualshock 3 Sixaxis
Type = 1

// Define number of Input Device
// default: 0 = /dev/input/js0
InputDev = 0

// Mapping of longitudinal velocity to the joystick axis
AxisLongVel = 1

// Mapping of lateral velocity to the joystick axis
AxisLatVel = 0

// Mapping of rotation velocity to the joystick axis
AxisRotVel = 2

// Set maximum allowed translational velocity in mm/s
VelTransMax = 500 //250 //520

// Set maximum allowed rotational velocity in rad/s
VelRotMax = 1.0 //0.5 //1.0

// Switch to enable (true) or disable (false) the lowpass of the joystick
LowPassEnabled = true

// Smoothing-Value of Lowpass in seconds
SmoothingVal = 0.15

// ----------------------------------------------------------------------
// GyroLitef
// ----------------------------------------------------------------------
[GyroLitef]

// use gyro?
UseGyro = false

// 0: AUTONOMOUS
// 1: SW_REQUEST
CommunicationMode = 0 

// 0: DELTA_ANG
// 1: ACCUMULATED_ANG
AngleType = 0

ComPort = "/dev/ttyM0"
//ComPort = "/dev/ttyM8"
//ComPort = "/dev/ttyUSB0"

Baudrate = 9600
Multiplier = 1.0
//Multiplier = 0.9216
StartAngle = 0.0
ScalingFactor = 1.0
MaxAngle = 5.0
ResetGyroAngle = 600.0
DriftDegPerHour = 2.6
GyroCycTime = 0.1

ZeroGyroEnabled = true
LogDriftRateEnabled = false
SlideMeanFacForDriftRate = 3.3e-4

