<?xml version="1.0"?>
<launch>

  <!-- "camera" should uniquely identify the device. All topics are pushed down
       into the "camera" namespace, and it is prepended to tf frame ids. -->
  <arg name="camera" default="cam3d" />
  <arg name="rgb_frame_id"   default="/head_cam3d_link" />
  <arg name="depth_frame_id" default="/head_cam3d_link" />


  <!-- device_id can have the following formats:
         "#1"              : Use first device found
         "2@3"             : Use device on USB bus 2, address 3
         "B00367707227042B": Use device with given serial number
    -->
  <arg name="device_id" default="#1" />

  <!-- By default, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml,
       where ${NAME} is of the form "[rgb|depth]_[serial#]", e.g. "depth_B00367707227042B".
       See camera_info_manager docs for calibration URL details. -->
  <arg name="rgb_camera_info_url"   default="" />
  <arg name="depth_camera_info_url" default="" />
    <!--arg name="rgb_camera_info_url" default="file:///$(find cob_camera_sensors)/ros/launch/$(env ROBOT)/kinect_rgb.yaml" /-->
    <!--arg name="depth_camera_info_url" default="file:///$(find cob_camera_sensors)/ros/launch/$(env ROBOT)/kinect_depth.yaml" /--> <!-- if you do not provide a calibration, the driver will output a warning and maybe an error - however, it will take a standard calibration and will proceed working-->

  <!-- Arguments for remapping "rgb", "depth", "depth_registered" namespaces -->
  <arg name="rgb"              default="rgb" />
  <arg name="ir"               default="ir" />
  <arg name="depth"            default="depth" />
  <arg name="depth_registered" default="depth_registered" />

  <!-- Optionally launch manager in GDB, for debugging -->
  <arg name="debug" default="false" />
  <arg if="$(arg debug)" name="launch_prefix" value="xterm -e gdb --args" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <!-- Also globally disable bond heartbeat timeout in debug mode, so everything
       doesn't die when you hit a break point -->
  <param if="$(arg debug)" name="/bond_disable_heartbeat_timeout" value="true" />

  <!-- Nodelet manager, lives in top-level namespace -->
  <arg name="manager" value="$(arg camera)_nodelet_manager" />
  <node pkg="nodelet" type="nodelet" name="$(arg manager)" args="manager"
        output="screen" launch-prefix="$(arg launch_prefix)" />

  <!-- Push down all topics/nodelets into "camera" namespace -->
  <group ns="$(arg camera)">

    <!-- Load driver and processing nodelets in standard configuration -->
    <include file="$(find openni_launch)/launch/includes/device.launch">
      <!-- Could really use some syntactic sugar for this -->
      <arg name="manager"               value="/$(arg manager)" /> <!-- Fully resolved -->
      <arg name="device_id"             value="$(arg device_id)" />
      <arg name="rgb_frame_id"          value="$(arg rgb_frame_id)" />
      <arg name="depth_frame_id"        value="$(arg depth_frame_id)" />
      <arg name="rgb_camera_info_url"   value="$(arg rgb_camera_info_url)" />
      <arg name="depth_camera_info_url" value="$(arg depth_camera_info_url)" />
      <arg name="rgb"                   value="$(arg rgb)" />
      <arg name="ir"                    value="$(arg ir)" />
      <arg name="depth"                 value="$(arg depth)" />
      <arg name="depth_registered"      value="$(arg depth_registered)" />
    </include>
		<group ns="driver">
    <rosparam>
      depth_registration: false
      depth_ir_offset_x: 0
      depth_ir_offset_y: 0
    </rosparam>
		</group>

  </group> <!-- camera -->

<!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
  <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid $(arg manager)" output="screen">
    <remap from="~input" to="/cam3d/depth/points" />
    <rosparam>
      filter_field_name: z
      filter_limit_min: 0.01
      filter_limit_max: 1.5
      filter_limit_negative: False
      leaf_size: 0.04
    </rosparam>
  </node>

</launch>
