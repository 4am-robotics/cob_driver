//ROS typedefs
#include "ros/ros.h"
#include <cob_msgs/PowerState.h>
#include <cob_msgs/EmergencyStopState.h>
#include <std_msgs/Float64.h>


class cob_voltage_control_config
{
public:
    double min_voltage;
    double max_voltage;
    double max_voltage_res;
    int num_voltage_port;
    int num_em_stop_port;
    int num_scanner_em_port;
};

class cob_voltage_control_data
{
// autogenerated: don't touch this class
public:
    //configuration data

    //input data
    int in_phidget_voltage;
    int in_phidget_current;

    //output data
    cob_msgs::PowerState out_pub_power_state_;
    cob_msgs::EmergencyStopState out_pub_em_stop_state_;
    std_msgs::Float64 out_pub_voltage_;
    std_msgs::Float64 out_pub_current_;
};

//document how this class has to look
//never change after first generation
class cob_voltage_control_impl
{

public:

    //CPhidgetInterfaceKitHandle IFK;
    cob_voltage_control_impl()
    {
        //user specific code
    }
    void configure()
    {
    }
    void update(cob_voltage_control_data &data, cob_voltage_control_config config)
    {
        //user specific code
        //Get Battery Voltage
        double voltage_raw = 0;
        //Get Battery Current
        double current = 0;
//      CPhidgetInterfaceKit_getSensorValue((CPhidgetInterfaceKitHandle)IFK, config.num_voltage_port, &voltage_raw);
        voltage_raw = data.in_phidget_voltage;
        current = data.in_phidget_current;

        ROS_DEBUG("Sensor voltage_raw: %f", voltage_raw);
        ROS_DEBUG("Sensor current: %f", current);

        //Calculation of real voltage
        //max_voltage = 70V ; max_counts = 999
        double max_counts = 725.0; // 3v => max
        double voltage = voltage_raw * config.max_voltage_res/max_counts;
        data.out_pub_voltage_.data = voltage;
        ROS_DEBUG("voltage %f", voltage);

        data.out_pub_current_.data = current;
        ROS_DEBUG("current %f", current);
        
        bool charging;
        if (current > 0){charging = true;}
        else {charging = false;}

        //Linear calculation for percentage
        double percentage =  (voltage - config.min_voltage) * 100/(config.max_voltage - config.min_voltage);

        data.out_pub_power_state_.header.stamp = ros::Time::now();
        data.out_pub_power_state_.voltage = voltage;
        data.out_pub_power_state_.current = current;
        data.out_pub_power_state_.power_consumption = voltage * current;
        data.out_pub_power_state_.relative_remaining_capacity = percentage;
        data.out_pub_power_state_.charging = charging;

    }

    void exit()
    {
    }

};
