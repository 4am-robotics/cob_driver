//ROS typedefs
#include "ros/ros.h"
#include <pr2_msgs/PowerBoardState.h>
#include <pr2_msgs/PowerState.h>

#include <libphidgets/phidget21.h>

class cob_voltage_control_data
{
// autogenerated: don't touch this class
public:
//configuration data

//input data

//output data
	pr2_msgs::PowerBoardState out_pub_em_stop_state_;
	pr2_msgs::PowerState out_pub_powerstate_;

};

//document how this class has to look
//never change after first generation


class cob_voltage_control_impl
{

public:

	CPhidgetInterfaceKitHandle IFK;



	cob_voltage_control_impl()
    {
        //user specific code
    }
    void configure() 
    {
        //user specific code

    	//init and open phidget
    	int numInputs, numOutputs, numSensors, numAnalog;
    	int err;

    	IFK = 0;
		CPhidget_enableLogging(PHIDGET_LOG_VERBOSE, NULL);
		CPhidgetInterfaceKit_create(&IFK);

		//CPhidgetInterfaceKit_set_OnSensorChange_Handler(IFK, IFK_SensorChangeHandler, NULL);
		//CPhidget_set_OnAttach_Handler((CPhidgetHandle)IFK, IFK_AttachHandler, NULL);

		//opening phidget
		CPhidget_open((CPhidgetHandle)IFK, -1);

		//wait 5 seconds for attachment
		ROS_DEBUG("waiting for phidgets attachement...");
		if((err = CPhidget_waitForAttachment((CPhidgetHandle)IFK, 10000)) != EPHIDGET_OK )
		{
			const char *errStr;
			CPhidget_getErrorDescription(err, &errStr);
			ROS_ERROR("Error waiting for attachment: (%d): %s",err,errStr);
			return;
		}
		ROS_DEBUG("... attached");

		int sernum, version;
		const char *deviceptr, *label;
		CPhidget_getDeviceType((CPhidgetHandle)IFK, &deviceptr);
		CPhidget_getSerialNumber((CPhidgetHandle)IFK, &sernum);
		CPhidget_getDeviceVersion((CPhidgetHandle)IFK, &version);
		CPhidget_getDeviceLabel((CPhidgetHandle)IFK, &label);

		ROS_DEBUG("%s", deviceptr);
		ROS_DEBUG("Version: %8d SerialNumber: %10d", version, sernum);
		ROS_DEBUG("Label: %s", label);
		CPhidgetInterfaceKit_getOutputCount((CPhidgetInterfaceKitHandle)IFK, &numOutputs);
		CPhidgetInterfaceKit_getInputCount((CPhidgetInterfaceKitHandle)IFK, &numInputs);
		CPhidgetInterfaceKit_getSensorCount((CPhidgetInterfaceKitHandle)IFK, &numSensors);
		//CPhidgetAnalog_getOutputCount((CPhidgetAnalogHandle)IFK, &numAnalog);

		ROS_DEBUG("Sensors:%d Inputs:%d Outputs:%d", numSensors, numInputs, numOutputs);


    }
    void update(cob_voltage_control_data &data)
    {
        //user specific code
    	int index = 0;
    	int inputState = -1;

    	//Check for EM Stop
    	index = 0;
    	inputState = -1;
    	CPhidgetInterfaceKit_getInputState ((CPhidgetInterfaceKitHandle)IFK, index, &inputState);
    	if(inputState == 0)
    		ROS_DEBUG("EMStop %d", inputState);
		if(inputState == 1)
			ROS_DEBUG("EMStop %d", inputState);

		data.out_pub_em_stop_state_.header.stamp = ros::Time::now();
		// pr2 power_board_state
		data.out_pub_em_stop_state_.run_stop = false;
		//for cob the wireless stop field is misused as laser stop field
		data.out_pub_em_stop_state_.wireless_stop = false;


    	//Get Battery Voltage
		index = 1;
		inputState = -1;
		CPhidgetInterfaceKit_getInputState ((CPhidgetInterfaceKitHandle)IFK, index, &inputState);
		data.out_pub_powerstate_.header.stamp = ros::Time::now();
		data.out_pub_powerstate_.power_consumption = 0.0;
		data.out_pub_powerstate_.time_remaining = ros::Duration(1000);
		data.out_pub_powerstate_.relative_capacity = 40; //percentage;

    }
    
    void exit()
    {
    	CPhidget_close((CPhidgetHandle)IFK);
    	CPhidget_delete((CPhidgetHandle)IFK);
    }

};
